[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "POTUS Economic Scorecard is an interactive Shiny application that allows users to compare economic performance metrics across different presidential administrations. The app provides visual representations of various economic indicators, including:\n\nS&P 500\nDow Jones Industrial Average\nNASDAQ\nUnemployment Rate\nInflation Rate\n\nThe app is a static web page that runs entirely in your web browser using shinylive, so it can take a bit to load.\nThe app is best viewed in landscape mode on a mobile device."
  },
  {
    "objectID": "about.html#overview",
    "href": "about.html#overview",
    "title": "About",
    "section": "",
    "text": "POTUS Economic Scorecard is an interactive Shiny application that allows users to compare economic performance metrics across different presidential administrations. The app provides visual representations of various economic indicators, including:\n\nS&P 500\nDow Jones Industrial Average\nNASDAQ\nUnemployment Rate\nInflation Rate\n\nThe app is a static web page that runs entirely in your web browser using shinylive, so it can take a bit to load.\nThe app is best viewed in landscape mode on a mobile device."
  },
  {
    "objectID": "about.html#features",
    "href": "about.html#features",
    "title": "About",
    "section": "Features",
    "text": "Features\n\nMultiple Economic Indicators: Compare performance using S&P 500, Dow Jones, NASDAQ, Unemployment Rate, and Inflation Rate.\nFlexible Reference Points: Choose between “Inauguration Day” or “Day Before Election” as your reference point.\nParty Filtering: Filter presidents by political party.\nCustomizable Time Period: Adjust the number of days to display for comparison.\nData Export: Download the plot or raw data for your own analysis"
  },
  {
    "objectID": "about.html#how-it-works",
    "href": "about.html#how-it-works",
    "title": "About",
    "section": "How It Works",
    "text": "How It Works\nHistorical economic data is downloaded daily and stored in the app GitHub repository. The app loads this data and calculates performance metrics relative to your chosen reference date. For market indices (S&P 500, Dow Jones, NASDAQ), performance is shown as percent change from the reference date. For economic indicators (Unemployment Rate, Inflation Rate), absolute values are displayed."
  },
  {
    "objectID": "about.html#data-sources",
    "href": "about.html#data-sources",
    "title": "About",
    "section": "Data Sources",
    "text": "Data Sources\n\nMarket data (S&P 500, Dow Jones, NASDAQ) is sourced from Yahoo Finance\nEconomic indicators are sourced from FRED (Federal Reserve Economic Data)"
  },
  {
    "objectID": "about.html#technology",
    "href": "about.html#technology",
    "title": "About",
    "section": "Technology",
    "text": "Technology\nThis application is built using:\n\nR Shiny for the interactive web application.\nshinylive for browser-based execution without a server.\nQuarto for website publishing.\nplotly for interactive visualizations."
  },
  {
    "objectID": "about.html#local-deployment",
    "href": "about.html#local-deployment",
    "title": "About",
    "section": "Local Deployment",
    "text": "Local Deployment\nTo run the app locally:\n\nClone the repository:\ngit clone https://github.com/jhelvy/potus-econ-scorecard.git\ncd potus-econ-scorecard\nOpen the project in RStudio or run from the R console:\nlibrary(shiny)\nrunApp()"
  },
  {
    "objectID": "about.html#contributing",
    "href": "about.html#contributing",
    "title": "About",
    "section": "Contributing",
    "text": "Contributing\nContributions are welcome! Please feel free to submit a Pull Request.\n\nFork the repository\nCreate your feature branch (git checkout -b feature/amazing-feature)\nCommit your changes (git commit -m 'Add some amazing feature')\nPush to the branch (git push origin feature/amazing-feature)\nOpen a Pull Request"
  },
  {
    "objectID": "about.html#license",
    "href": "about.html#license",
    "title": "About",
    "section": "License",
    "text": "License\nThis project is licensed under a CC-BY-SA-4.0 license - see the LICENSE file for details."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "POTUS Economic Scorecard",
    "section": "",
    "text": "This can take ~30s to load as it runs entirely in your browser…just leave the window open until it loads\nThe app is best viewed in landscape mode on a mobile device.\n\n#| standalone: true\n#| viewerHeight: 1100\n\n# Load required libraries\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggrepel)\nlibrary(plotly)\n\n#-------------------------------------------\n# Data Loading and Processing Functions ----\n#-------------------------------------------\n\n# Function to load presidents data\nload_presidents_data &lt;- function() {\n    presidents_data &lt;- data.frame(\n      president = c(\n        \"Eisenhower (1957)\", \"Kennedy (1961)\", \"Johnson (1963)\", \"Nixon (1969)\",\n        \"Nixon (1973)\", \"Ford (1974)\", \"Carter (1977)\", \"Reagan (1981)\",\n        \"Reagan (1985)\", \"Bush Sr. (1989)\", \"Clinton (1993)\", \"Clinton (1997)\",\n        \"Bush Jr. (2001)\", \"Bush Jr. (2005)\", \"Obama (2009)\", \"Obama (2013)\",\n        \"Trump (2017)\", \"Biden (2021)\", \"Trump (2025)\"\n      ),\n      inauguration_date = as.Date(c(\n        \"1957-01-20\", \"1961-01-20\", \"1963-11-22\", \"1969-01-20\",\n        \"1973-01-20\", \"1974-08-09\", \"1977-01-20\", \"1981-01-20\",\n        \"1985-01-20\", \"1989-01-20\", \"1993-01-20\", \"1997-01-20\",\n        \"2001-01-20\", \"2005-01-20\", \"2009-01-20\", \"2013-01-20\",\n        \"2017-01-20\", \"2021-01-20\", \"2025-01-20\"\n      )),\n      election_date = as.Date(c(\n        \"1956-11-06\", \"1960-11-08\", \"1960-11-08\", \"1968-11-05\",\n        \"1972-11-07\", \"1972-11-07\", \"1976-11-02\", \"1980-11-04\",\n        \"1984-11-06\", \"1988-11-08\", \"1992-11-03\", \"1996-11-05\",\n        \"2000-11-07\", \"2004-11-02\", \"2008-11-04\", \"2012-11-06\",\n        \"2016-11-08\", \"2020-11-03\", \"2024-11-05\"\n      )),\n      party = c(\n        \"Republican\", \"Democratic\", \"Democratic\", \"Republican\",\n        \"Republican\", \"Republican\", \"Democratic\", \"Republican\",\n        \"Republican\", \"Republican\", \"Democratic\", \"Democratic\",\n        \"Republican\", \"Republican\", \"Democratic\", \"Democratic\",\n        \"Republican\", \"Democratic\", \"Republican\"\n      ),\n      stringsAsFactors = FALSE\n    )\n\n    # Convert date column to Date type\n    presidents_data$inauguration_date &lt;- as.Date(presidents_data$inauguration_date)\n    presidents_data$election_date &lt;- as.Date(presidents_data$election_date)\n\n    return(presidents_data)\n}\n\n# Function to load prepared data\nload_data &lt;- function() {\n  # URL for the data files in GitHub\n  market_data_url &lt;- \"https://raw.githubusercontent.com/jhelvy/potus-econ-scorecard/refs/heads/main/market_data.csv\"\n\n  # Load data\n  tryCatch({\n    market_data_raw &lt;- read.csv(market_data_url, stringsAsFactors = FALSE)\n    presidents_data &lt;- load_presidents_data()\n\n    # Convert date column to Date type\n    market_data_raw$date &lt;- as.Date(market_data_raw$date)\n    \n    # Organize market data by index\n    market_data &lt;- split(market_data_raw, market_data_raw$index_id)\n    \n    return(list(\n      market_data = market_data,\n      presidents_data = presidents_data\n    ))\n  }, error = function(e) {\n    # Return empty data frames if loading fails\n    warning(\"Error loading data: \", e$message)\n    return(list(\n      market_data = list(),\n      presidents_data = data.frame()\n    ))\n  })\n}\n\n# Define which indices should use percent change vs absolute values\nget_index_types &lt;- function() {\n  list(\n    # Market indices - use percent change\n    percent_change = c(\"sp500\", \"djia\", \"nasdaq\", \"dxy\"),\n    \n    # Economic indicators - use absolute values\n    absolute = c(\"unemployment\", \"inflation\", \"treasury10yr\", \"housing\", \"gdp\", \"debt_gdp\", \"labor_participation\")\n  )\n}\n\n# Function to process market data for selected presidents and reference date\nprocess_market_data &lt;- function(market_data,\n                                presidents_data,\n                                selected_index,\n                                selected_presidents,\n                                reference_type,\n                                party_filter,\n                                days_to_show) {\n  \n  # Check if market data is available\n  if (is.null(market_data) || length(market_data) == 0) {\n    return(data.frame())\n  }\n  \n  # Get index data\n  index_data_list &lt;- list(market_data[[selected_index]])\n  names(index_data_list) &lt;- selected_index\n  \n  # Filter presidents by party and selection\n  filtered_presidents &lt;- presidents_data %&gt;%\n    filter(party %in% party_filter, president %in% selected_presidents)\n  \n  # If no presidents selected, return empty dataframe\n  if (nrow(filtered_presidents) == 0) {\n    return(data.frame())\n  }\n  \n  # Process data for each selected president and index\n  result_data &lt;- data.frame()\n  \n  for (pres_i in 1:nrow(filtered_presidents)) {\n    pres_row &lt;- filtered_presidents[pres_i, ]\n    \n    # Determine reference date based on user selection\n    ref_date &lt;- if (reference_type == \"inauguration\") {\n      pres_row$inauguration_date\n    } else {\n      pres_row$election_date\n    }\n    \n    # Process each index\n    for (idx_id in names(index_data_list)) {\n      index_data &lt;- index_data_list[[idx_id]]\n      \n      # Find closest trading day to reference date\n      closest_ref_date &lt;- index_data %&gt;%\n        filter(date &gt;= ref_date) %&gt;%\n        arrange(date) %&gt;%\n        slice(1) %&gt;%\n        pull(date)\n      \n      if (length(closest_ref_date) == 0) {\n        # Skip if no suitable reference date found\n        next\n      }\n      \n      # Get the reference value\n      ref_value &lt;- index_data %&gt;%\n        filter(date == closest_ref_date) %&gt;%\n        pull(value)\n      \n      # Calculate days from reference and percent change\n      pres_data &lt;- index_data %&gt;%\n        filter(date &gt;= closest_ref_date) %&gt;%\n        mutate(\n          president = pres_row$president,\n          party = pres_row$party,\n          day = as.numeric(difftime(date, closest_ref_date, units = \"days\")),\n          reference_value = ref_value,\n          percent_change = (value / ref_value - 1) * 100\n        ) %&gt;%\n        filter(day &lt;= days_to_show)\n      \n      result_data &lt;- rbind(result_data, pres_data)\n    }\n  }\n  \n  return(result_data)\n}\n\n# Function to process economic indicator data that shouldn't use percent change\nprocess_econ_data &lt;- function(market_data,\n                              presidents_data,\n                              selected_index,\n                              selected_presidents,\n                              reference_type,\n                              party_filter,\n                              days_to_show) {\n\n  # Check if market data is available\n  if (is.null(market_data) || length(market_data) == 0) {\n    return(data.frame())\n  }\n  \n  # Get index data\n  index_data_list &lt;- list(market_data[[selected_index]])\n  names(index_data_list) &lt;- selected_index\n  \n  # Filter presidents by party and selection\n  filtered_presidents &lt;- presidents_data %&gt;%\n    filter(party %in% party_filter, president %in% selected_presidents)\n  \n  # If no presidents selected, return empty dataframe\n  if (nrow(filtered_presidents) == 0) {\n    return(data.frame())\n  }\n  \n  # Process data for each selected president and index\n  result_data &lt;- data.frame()\n  \n  for (pres_i in 1:nrow(filtered_presidents)) {\n    pres_row &lt;- filtered_presidents[pres_i, ]\n    \n    # Determine reference date based on user selection\n    ref_date &lt;- if (reference_type == \"inauguration\") {\n      pres_row$inauguration_date\n    } else {\n      pres_row$election_date\n    }\n    \n    # Process each index\n    for (idx_id in names(index_data_list)) {\n      index_data &lt;- index_data_list[[idx_id]]\n      \n      # Find closest day to reference date\n      closest_ref_date &lt;- index_data %&gt;%\n        filter(date &gt;= ref_date) %&gt;%\n        arrange(date) %&gt;%\n        slice(1) %&gt;%\n        pull(date)\n      \n      if (length(closest_ref_date) == 0) {\n        # Skip if no suitable reference date found\n        next\n      }\n      \n      # For economic indicators, we show absolute values (not percent change)\n      pres_data &lt;- index_data %&gt;%\n        filter(date &gt;= closest_ref_date) %&gt;%\n        mutate(\n          president = pres_row$president,\n          party = pres_row$party,\n          day = as.numeric(difftime(date, closest_ref_date, units = \"days\"))\n        ) %&gt;%\n        filter(day &lt;= days_to_show)\n      \n      result_data &lt;- rbind(result_data, pres_data)\n    }\n  }\n  \n  return(result_data)\n}\n\n# Function to get the appropriate y-axis label for an index\nget_y_axis_label &lt;- function(selected_index) {\n  switch(selected_index,\n         \"sp500\" = \"Percent Change (%)\",\n         \"djia\" = \"Percent Change (%)\",\n         \"nasdaq\" = \"Percent Change (%)\",\n         \"dxy\" = \"Percent Change (%)\",\n         \"unemployment\" = \"Unemployment Rate (%)\",\n         \"inflation\" = \"Inflation Rate (YoY %)\",\n         \"treasury10yr\" = \"10-Year Treasury Yield (%)\",\n         \"housing\" = \"Home Price Index\",\n         \"gdp\" = \"Real GDP (Billions of 2017 $)\",\n         \"debt_gdp\" = \"Federal Debt to GDP Ratio (%)\",\n         \"labor_participation\" = \"Labor Force Participation Rate (%)\",\n         \"Percent Change (%)\"  # Default\n  )\n}\n\n# Function to get help text for an index with source information\nget_index_help_text &lt;- function(selected_index) {\n  switch(selected_index,\n         \"sp500\" = \"The S&P 500 is a stock market index tracking the performance of 500 large companies listed on U.S. exchanges. Source: Standard & Poor's.\",\n         \"djia\" = \"The Dow Jones Industrial Average is a price-weighted index of 30 significant stocks traded on the NYSE and NASDAQ. Source: S&P Dow Jones Indices.\",\n         \"nasdaq\" = \"The NASDAQ Composite Index includes all companies listed on the NASDAQ stock market, weighted by market capitalization. Source: NASDAQ, Inc.\",\n         \"dxy\" = \"The US Dollar Index measures the dollar against a basket of foreign currencies. A rising value indicates a stronger dollar, which can be good for imports but challenging for exports. Source: ICE Futures U.S.\",\n         \"unemployment\" = \"The Unemployment Rate represents the percentage of the labor force that is unemployed but actively seeking employment. Source: U.S. Bureau of Labor Statistics.\",\n         \"inflation\" = \"The Inflation Rate measures the year-over-year percentage change in consumer prices as captured by the Consumer Price Index (CPI). Source: U.S. Bureau of Labor Statistics.\",\n         \"treasury10yr\" = \"The 10-Year Treasury Yield reflects market expectations about future growth and inflation. Lower yields generally indicate economic pessimism or lower inflation expectations. Source: U.S. Department of the Treasury.\",\n         \"housing\" = \"The Case-Shiller Home Price Index tracks changes in the value of residential real estate nationwide. Source: S&P CoreLogic.\",\n         \"gdp\" = \"Real Gross Domestic Product is the inflation-adjusted value of all goods and services produced by an economy. Source: U.S. Bureau of Economic Analysis.\",\n         \"debt_gdp\" = \"The Federal Debt to GDP Ratio shows government debt as a percentage of annual economic output, a measure of fiscal sustainability. Source: U.S. Treasury and Bureau of Economic Analysis.\",\n         \"labor_participation\" = \"The Labor Force Participation Rate shows the percentage of the population that is either employed or actively seeking employment. Source: U.S. Bureau of Labor Statistics.\",\n         \"\"  # Default - no special help text\n  )\n}\n\n#-------------------------------------------\n# UI Definition ----\n#-------------------------------------------\n\nui &lt;- fluidPage(\n\n  titlePanel(\"\"),\n\n  sidebarLayout(\n    sidebarPanel(\n      # Index selection\n      radioButtons(\"selected_index\", \"Select Economic Indicator:\",\n                   choices = list(\n                     # Market Indices\n                     \"S&P 500\" = \"sp500\", \n                     \"Dow Jones\" = \"djia\",\n                     \"NASDAQ\" = \"nasdaq\",\n                     \"US Dollar Index\" = \"dxy\",\n                     \n                     # Economic Indicators\n                     \"Unemployment Rate\" = \"unemployment\",\n                     \"Inflation Rate\" = \"inflation\",\n                     \"10-Year Treasury Yield\" = \"treasury10yr\",\n                     \"Home Price Index\" = \"housing\",\n                     \"Real GDP\" = \"gdp\",\n                     \"Federal Debt to GDP Ratio\" = \"debt_gdp\",\n                     \"Labor Force Participation\" = \"labor_participation\"\n                   ),\n                   selected = \"sp500\"),\n      \n      # Baseline selection\n      radioButtons(\"reference_date\", \"Reference Date:\",\n                   choices = list(\n                     \"Inauguration Day\" = \"inauguration\", \n                     \"Day Before Election\" = \"election\"\n                   ),\n                   selected = \"inauguration\"),\n      \n      # Time period selection\n      sliderInput(\"time_period\", \"Days to Display:\",\n                  min = 10, max = 365*4, value = 100, step = 10),\n      \n      # Party filter\n      checkboxGroupInput(\"party_filter\", \"Filter by Party:\",\n                         choices = c(\"Democratic\", \"Republican\"),\n                         selected = c(\"Democratic\", \"Republican\")),\n      \n      # President selection buttons\n      div(\n        style = \"display: flex; justify-content: space-between; margin-bottom: 10px;\",\n        actionButton(\"select_all\", \"Select All\", class = \"btn-sm\"),\n        actionButton(\"deselect_all\", \"Deselect All\", class = \"btn-sm\")\n      ),\n      \n      # President checkboxes (dynamic)\n      uiOutput(\"president_selection\")\n    ),\n    \n    # Main content\n    mainPanel(\n      # Add the info box above the plot for indicator descriptions\n      uiOutput(\"index_info_box\"),\n\n      # Plot or \"No Data\" message\n      uiOutput(\"plot_or_message\"),\n\n      div(\n        style = \"display: flex; justify-content: flex-end; margin-top: 10px;\",\n        actionButton(\"export_plot\", \"Export Plot\", class = \"btn-sm\"),\n        actionButton(\"export_data\", \"Export Data\", class = \"btn-sm\")\n      ),\n      uiOutput(\"export_modal\")\n    )\n  )\n)\n\n#-------------------------------------------\n# Server Logic ----\n#-------------------------------------------\n\nserver &lt;- function(input, output, session) {\n  \n  # Reactive values to store loaded data\n  loaded_data &lt;- reactiveVal(NULL)\n  \n  # Show loading message\n  showModal(modalDialog(\n    title = \"Loading Data\",\n    \"Loading economic data. This may take a moment...\",\n    footer = NULL,\n    easyClose = FALSE\n  ))\n  \n  # Load data on startup\n  observe({\n    # Get data\n    data_list &lt;- load_data()\n    \n    # Store the data\n    loaded_data(data_list)\n    \n    # Remove loading message\n    removeModal()\n  })\n  \n  # Index types\n  index_types &lt;- get_index_types()\n  \n  # Update default days depending on starting reference point\n  observeEvent(input$reference_date, {\n    # Calculate appropriate default days based on reference type\n    default_days &lt;- if (input$reference_date == \"inauguration\") {\n      100  # Default for inauguration\n    } else {\n      180  # Default for election (includes transition period + first 100 days)\n    }\n    \n    # Update the slider with the new default value\n    updateSliderInput(session, \"time_period\", value = default_days)\n  })\n  \n  # Dynamic UI for president selection - reversed order\n  output$president_selection &lt;- renderUI({\n    data &lt;- loaded_data()\n    \n    if (is.null(data) || nrow(data$presidents_data) == 0) {\n      return(NULL)\n    }\n    \n    # Get presidents from data and reverse the order\n    presidents &lt;- rev(data$presidents_data$president)\n    \n    # Return checkbox group input with reversed order\n    checkboxGroupInput(\"selected_presidents\", \n                       \"Select Presidents:\", \n                       choices = presidents,\n                       selected = head(presidents, 4)) # Select the first 4 presidents in the reversed list (most recent)\n  })\n  \n  # Render indicator info box above the plot\n  output$index_info_box &lt;- renderUI({\n    selected_index &lt;- input$selected_index\n    help_text &lt;- get_index_help_text(selected_index)\n    \n    if (help_text != \"\") {\n      div(\n        style = \"margin-bottom: 15px; padding: 12px; background-color: #f8f9fa; border-left: 4px solid #007bff; border-radius: 5px;\",\n        HTML(help_text)\n      )\n    }\n  })\n  \n  # Process data based on user selections\n  processed_data &lt;- reactive({\n    # Get data\n    data &lt;- loaded_data()\n    \n    # Make sure data is loaded\n    req(data, data$market_data, input$selected_presidents)\n    \n    # Get user selections\n    selected_index &lt;- input$selected_index\n    reference_type &lt;- input$reference_date\n    selected_presidents &lt;- input$selected_presidents\n    party_filter &lt;- input$party_filter\n    days_to_show &lt;- input$time_period\n    \n    # Choose the appropriate processing function based on the selected index\n    if (selected_index %in% index_types$absolute) {\n      # For economic indicators, use absolute values\n      return(process_econ_data(\n        data$market_data,\n        data$presidents_data,\n        selected_index,\n        selected_presidents,\n        reference_type,\n        party_filter,\n        days_to_show\n      ))\n    } else {\n      # For market indices, use percent change from reference date\n      return(process_market_data(\n        data$market_data,\n        data$presidents_data,\n        selected_index,\n        selected_presidents,\n        reference_type,\n        party_filter,\n        days_to_show\n      ))\n    }\n  })\n  \n  # Create the ggplot object for the selected data (used for export)\n  create_ggplot &lt;- reactive({\n    # Get processed data\n    plot_data &lt;- processed_data()\n    \n    # Make sure there's data to plot\n    req(nrow(plot_data) &gt; 0)\n    \n    # Reference type for title\n    ref_type &lt;- if (input$reference_date == \"inauguration\") {\n      \"Inauguration Day\"\n    } else {\n      \"Day Before Election\"\n    }\n    \n    # Define party colors\n    party_colors &lt;- c(\"Democratic\" = \"blue\", \"Republican\" = \"red\")\n    \n    # Get y-axis label\n    y_axis_label &lt;- get_y_axis_label(input$selected_index)\n    \n    if (input$selected_index %in% index_types$absolute) {\n      # Plot for economic indicators (absolute values)\n      index_name &lt;- unique(plot_data$index_name)[1]\n      \n      # Get end points for each president\n      end_points &lt;- plot_data %&gt;% \n        group_by(president, party) %&gt;% \n        filter(day == max(day)) %&gt;%\n        mutate(label = paste0(president, \" (\", round(value, 1), \")\"))\n      \n      # Create base ggplot with enhanced tooltips\n      p &lt;- ggplot(plot_data, aes(x = day, y = value, color = party, group = president)) +\n        geom_line(size = 1, alpha = 0.8) +\n        geom_point(data = end_points, size = 3) +\n        geom_text_repel(\n          data = end_points,\n          aes(label = label),\n          direction = \"y\",\n          hjust = 0,\n          vjust = 0,\n          nudge_x = 15,\n          force = 3,\n          segment.size = 0.2,\n          box.padding = 0.5,\n          show.legend = FALSE\n        ) +\n        scale_color_manual(values = party_colors, labels = c(\"Democratic\", \"Republican\")) +\n        labs(\n          title = paste(index_name, \"Since\", ref_type),\n          subtitle = paste0(\"Showing first \", input$time_period, \" days\"),\n          x = paste(\"Days Since\", ref_type),\n          y = y_axis_label,\n          color = \"Party\"  # Capitalize Party in legend\n        ) +\n        theme_minimal() +\n        theme(\n          plot.title = element_text(face = \"bold\"),\n          panel.grid.minor = element_blank(),\n          legend.position = \"bottom\"\n        ) +\n        # Add extra space on right for labels\n        coord_cartesian(xlim = c(0, max(plot_data$day) * 1.3))\n      \n      # For unemployment and some other metrics, we might want to set y-limits\n      if (input$selected_index == \"unemployment\") {\n        p &lt;- p + ylim(0, max(plot_data$value) * 1.1)  # Ensure we start at 0 for unemployment\n      }\n      \n      return(p)\n      \n    } else {\n      # Plot for a single market index (percent change)\n      index_name &lt;- unique(plot_data$index_name)[1]\n      \n      # Get end points for each president\n      end_points &lt;- plot_data %&gt;% \n        group_by(president, party) %&gt;% \n        filter(day == max(day)) %&gt;%\n        mutate(label = paste0(president, \" (\", round(percent_change, 1), \"%)\"))\n      \n      # Create base ggplot with enhanced tooltips\n      p &lt;- ggplot(plot_data, aes(x = day, y = percent_change, color = party, group = president)) +\n        geom_line(size = 1, alpha = 0.8) +\n        geom_point(data = end_points, size = 3) +\n        geom_text_repel(\n          data = end_points,\n          aes(label = label),\n          direction = \"y\",\n          hjust = 0,\n          vjust = 0,\n          nudge_x = 15,\n          force = 3,\n          segment.size = 0.2,\n          box.padding = 0.5,\n          show.legend = FALSE\n        ) +\n        geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n        scale_color_manual(values = party_colors, labels = c(\"Democratic\", \"Republican\")) +\n        labs(\n          title = paste(index_name, \"Performance Since\", ref_type),\n          subtitle = paste0(\"Showing first \", input$time_period, \" days (0% = value on reference date)\"),\n          x = paste(\"Days Since\", ref_type),\n          y = y_axis_label,\n          color = \"Party\"  # Capitalize Party in legend\n        ) +\n        theme_minimal() +\n        theme(\n          plot.title = element_text(face = \"bold\"),\n          panel.grid.minor = element_blank(),\n          legend.position = \"bottom\"\n        ) +\n        # Add extra space on right for labels\n        coord_cartesian(xlim = c(0, max(plot_data$day) * 1.3))\n      \n      return(p)\n    }\n  })\n\n  # Check if we have valid data to plot\n  has_data_to_plot &lt;- reactive({\n    plot_data &lt;- processed_data()\n    # More robust check - ensure we have actual data points for at least one president\n    return(!is.null(plot_data) && nrow(plot_data) &gt; 0 &&\n           length(unique(plot_data$president)) &gt; 0 &&\n           # For percent change indices, make sure we have valid percent_change values\n           (!input$selected_index %in% index_types$percent_change || any(!is.na(plot_data$percent_change))))\n  })\n\n  # Render either the plot or a \"no data\" message\n  output$plot_or_message &lt;- renderUI({\n    if (has_data_to_plot()) {\n      # We have data - show the plot\n      tagList(\n        plotlyOutput(\"economic_plot\", height = \"100%\")\n      )\n    } else {\n      # No data - show a message\n      ref_type &lt;- if (input$reference_date == \"inauguration\") {\n        \"Inauguration Day\"\n      } else {\n        \"Day Before Election\"\n      }\n\n      index_display_name &lt;- switch(input$selected_index,\n                                \"sp500\" = \"S&P 500\",\n                                \"djia\" = \"Dow Jones\",\n                                \"nasdaq\" = \"NASDAQ\",\n                                \"dxy\" = \"US Dollar Index\",\n                                \"unemployment\" = \"Unemployment Rate\",\n                                \"inflation\" = \"Inflation Rate\",\n                                \"treasury10yr\" = \"10-Year Treasury Yield\",\n                                \"housing\" = \"Home Price Index\",\n                                \"gdp\" = \"Real GDP\",\n                                \"debt_gdp\" = \"Federal Debt to GDP Ratio\",\n                                \"labor_participation\" = \"Labor Force Participation Rate\")\n\n      tagList(\n        div(\n          style = \"height: 400px; display: flex; flex-direction: column; justify-content: center; align-items: center; background-color: #f8f9fa; border-radius: 10px; padding: 20px; text-align: center;\",\n          tags$h4(\"Insufficient Data Available\", style = \"margin-bottom: 15px; color: #6c757d;\"),\n          tags$p(\"Try one of the following:\", style = \"margin-top: 15px; font-weight: bold;\"),\n          tags$ul(\n            style = \"list-style-type: none; padding: 0;\",\n            tags$li(\"• Change the reference date\", style = \"margin-bottom: 5px;\"),\n            tags$li(\"• Select different presidents\", style = \"margin-bottom: 5px;\"),\n            tags$li(\"• Choose a different time period\", style = \"margin-bottom: 5px;\"),\n            tags$li(\"• Select a different economic indicator\", style = \"margin-bottom: 5px;\")\n          )\n        )\n      )\n    }\n  })\n\n  # Render the plot - using direct plotly for better performance\n  output$economic_plot &lt;- renderPlotly({\n    # Get processed data\n    plot_data &lt;- processed_data()\n\n    # Make sure there's data to plot\n    req(nrow(plot_data) &gt; 0)\n\n    # Reference type for title\n    ref_type &lt;- if (input$reference_date == \"inauguration\") {\n      \"Inauguration Day\"\n    } else {\n      \"Day Before Election\"\n    }\n\n    # Define party colors\n    party_colors &lt;- c(\"Democratic\" = \"blue\", \"Republican\" = \"red\")\n\n    # Get y-axis label\n    y_axis_label &lt;- get_y_axis_label(input$selected_index)\n\n    if (input$selected_index %in% index_types$absolute) {\n      # Plot for economic indicators (absolute values)\n      index_name &lt;- unique(plot_data$index_name)[1]\n\n      # First create the basic plot structure\n      p &lt;- plot_ly()\n\n      # Process end points first for label creation\n      end_points &lt;- plot_data %&gt;%\n        group_by(president, party) %&gt;%\n        slice(which.max(day)) %&gt;%\n        ungroup()\n\n      # Create a list to store traces for each party\n      democratic_data &lt;- plot_data %&gt;% filter(party == \"Democratic\")\n      republican_data &lt;- plot_data %&gt;% filter(party == \"Republican\")\n\n      # Add Democratic party trace if we have data\n      if (nrow(democratic_data) &gt; 0) {\n        dem_presidents &lt;- unique(democratic_data$president)\n\n        for (pres in dem_presidents) {\n          pres_data &lt;- democratic_data %&gt;% filter(president == pres)\n\n          p &lt;- p %&gt;% add_trace(\n            data = pres_data,\n            x = ~day,\n            y = ~value,\n            name = pres,\n            legendgroup = \"Democratic\",\n            showlegend = FALSE, # Only show in party legend\n            color = I(\"blue\"),\n            type = 'scatter',\n            mode = 'lines',\n            hoverinfo = 'text',\n            text = ~paste0(president, \"&lt;br&gt;Day: \", day, \"&lt;br&gt;Value: \", round(value, 2)),\n            line = list(width = 2)\n          )\n        }\n\n        # Add a single legend entry for Democratic party\n        if (nrow(democratic_data) &gt; 0) {\n          p &lt;- p %&gt;% add_trace(\n            x = c(0),\n            y = c(0),\n            name = \"Democratic\",\n            legendgroup = \"Democratic\",\n            showlegend = TRUE,\n            color = I(\"blue\"),\n            type = 'scatter',\n            mode = 'lines',\n            line = list(width = 4),\n            visible = 'legendonly' # This makes the trace invisible but keeps the legend\n          )\n        }\n      }\n\n      # Add Republican party trace if we have data\n      if (nrow(republican_data) &gt; 0) {\n        rep_presidents &lt;- unique(republican_data$president)\n\n        for (pres in rep_presidents) {\n          pres_data &lt;- republican_data %&gt;% filter(president == pres)\n\n          p &lt;- p %&gt;% add_trace(\n            data = pres_data,\n            x = ~day,\n            y = ~value,\n            name = pres,\n            legendgroup = \"Republican\",\n            showlegend = FALSE, # Only show in party legend\n            color = I(\"red\"),\n            type = 'scatter',\n            mode = 'lines',\n            hoverinfo = 'text',\n            text = ~paste0(president, \"&lt;br&gt;Day: \", day, \"&lt;br&gt;Value: \", round(value, 2)),\n            line = list(width = 2)\n          )\n        }\n\n        # Add a single legend entry for Republican party\n        if (nrow(republican_data) &gt; 0) {\n          p &lt;- p %&gt;% add_trace(\n            x = c(0),\n            y = c(0),\n            name = \"Republican\",\n            legendgroup = \"Republican\",\n            showlegend = TRUE,\n            color = I(\"red\"),\n            type = 'scatter',\n            mode = 'lines',\n            line = list(width = 4),\n            visible = 'legendonly' # This makes the trace invisible but keeps the legend\n          )\n        }\n      }\n\n      # Add layout\n      p &lt;- p %&gt;% layout(\n        title = list(\n          text = paste(index_name, \"Since\", ref_type),\n          font = list(size = 16)\n        ),\n        xaxis = list(\n          title = paste(\"Days Since\", ref_type),\n          range = c(0, max(plot_data$day) * 1.3)\n        ),\n        yaxis = list(\n          title = y_axis_label,\n          range = if(input$selected_index == \"unemployment\") c(0, max(plot_data$value) * 1.1) else NULL\n        ),\n        legend = list(\n          title = list(text = \"Party\"),\n          orientation = \"h\",\n          y = -0.2\n        ),\n        margin = list(r = 100)\n      )\n\n      # Add individual annotations for each president\n      for (i in 1:nrow(end_points)) {\n        p &lt;- p %&gt;% add_annotations(\n          x = end_points$day[i],\n          y = end_points$value[i],\n          text = paste0(end_points$president[i], \" (\", round(end_points$value[i], 1), \")\"),\n          showarrow = TRUE,\n          arrowhead = 0,\n          arrowsize = 0.7,\n          arrowwidth = 1,\n          arrowcolor = \"gray70\",\n          xanchor = \"left\",\n          yanchor = \"middle\",\n          ax = 50,\n          ay = 0\n        )\n      }\n\n      p %&gt;% config(displayModeBar = TRUE)\n\n    } else {\n      # Plot for market indices (percent change)\n      index_name &lt;- unique(plot_data$index_name)[1]\n\n      # First create the basic plot structure\n      p &lt;- plot_ly()\n\n      # Process end points first for label creation\n      end_points &lt;- plot_data %&gt;%\n        group_by(president, party) %&gt;%\n        slice(which.max(day)) %&gt;%\n        ungroup()\n\n      # Create a list to store traces for each party\n      democratic_data &lt;- plot_data %&gt;% filter(party == \"Democratic\")\n      republican_data &lt;- plot_data %&gt;% filter(party == \"Republican\")\n\n      # Add Democratic party trace if we have data\n      if (nrow(democratic_data) &gt; 0) {\n        dem_presidents &lt;- unique(democratic_data$president)\n\n        for (pres in dem_presidents) {\n          pres_data &lt;- democratic_data %&gt;% filter(president == pres)\n\n          p &lt;- p %&gt;% add_trace(\n            data = pres_data,\n            x = ~day,\n            y = ~percent_change,\n            name = pres,\n            legendgroup = \"Democratic\",\n            showlegend = FALSE, # Only show in party legend\n            color = I(\"blue\"),\n            type = 'scatter',\n            mode = 'lines',\n            hoverinfo = 'text',\n            text = ~paste0(president, \"&lt;br&gt;Day: \", day, \"&lt;br&gt;Change: \", round(percent_change, 2), \"%\"),\n            line = list(width = 2)\n          )\n        }\n\n        # Add a single legend entry for Democratic party\n        if (nrow(democratic_data) &gt; 0) {\n          p &lt;- p %&gt;% add_trace(\n            x = c(0),\n            y = c(0),\n            name = \"Democratic\",\n            legendgroup = \"Democratic\",\n            showlegend = TRUE,\n            color = I(\"blue\"),\n            type = 'scatter',\n            mode = 'lines',\n            line = list(width = 4),\n            visible = 'legendonly' # This makes the trace invisible but keeps the legend\n          )\n        }\n      }\n\n      # Add Republican party trace if we have data\n      if (nrow(republican_data) &gt; 0) {\n        rep_presidents &lt;- unique(republican_data$president)\n\n        for (pres in rep_presidents) {\n          pres_data &lt;- republican_data %&gt;% filter(president == pres)\n\n          p &lt;- p %&gt;% add_trace(\n            data = pres_data,\n            x = ~day,\n            y = ~percent_change,\n            name = pres,\n            legendgroup = \"Republican\",\n            showlegend = FALSE, # Only show in party legend\n            color = I(\"red\"),\n            type = 'scatter',\n            mode = 'lines',\n            hoverinfo = 'text',\n            text = ~paste0(president, \"&lt;br&gt;Day: \", day, \"&lt;br&gt;Change: \", round(percent_change, 2), \"%\"),\n            line = list(width = 2)\n          )\n        }\n\n        # Add a single legend entry for Republican party\n        if (nrow(republican_data) &gt; 0) {\n          p &lt;- p %&gt;% add_trace(\n            x = c(0),\n            y = c(0),\n            name = \"Republican\",\n            legendgroup = \"Republican\",\n            showlegend = TRUE,\n            color = I(\"red\"),\n            type = 'scatter',\n            mode = 'lines',\n            line = list(width = 4),\n            visible = 'legendonly' # This makes the trace invisible but keeps the legend\n          )\n        }\n      }\n\n      # Add layout\n      p &lt;- p %&gt;% layout(\n        title = list(\n          text = paste(index_name, \"Performance Since\", ref_type),\n          font = list(size = 16)\n        ),\n        xaxis = list(\n          title = paste(\"Days Since\", ref_type),\n          range = c(0, max(plot_data$day) * 1.3)\n        ),\n        yaxis = list(\n          title = y_axis_label,\n          zeroline = TRUE\n        ),\n        shapes = list(\n          # Add zero line\n          list(\n            type = \"line\",\n            x0 = 0,\n            x1 = max(plot_data$day) * 1.3,\n            y0 = 0,\n            y1 = 0,\n            line = list(\n              color = \"gray\",\n              width = 1,\n              dash = \"dash\"\n            )\n          )\n        ),\n        legend = list(\n          title = list(text = \"Party\"),\n          orientation = \"h\",\n          y = -0.2\n        ),\n        margin = list(r = 100)\n      )\n\n      # Add individual annotations for each president\n      for (i in 1:nrow(end_points)) {\n        p &lt;- p %&gt;% add_annotations(\n          x = end_points$day[i],\n          y = end_points$percent_change[i],\n          text = paste0(end_points$president[i], \" (\", round(end_points$percent_change[i], 1), \"%)\"),\n          showarrow = TRUE,\n          arrowhead = 0,\n          arrowsize = 0.7,\n          arrowwidth = 1,\n          arrowcolor = \"gray70\",\n          xanchor = \"left\",\n          yanchor = \"middle\",\n          ax = 50,\n          ay = 0\n        )\n      }\n\n      p %&gt;% config(displayModeBar = TRUE)\n    }\n  })\n\n  \n  # Handle select all button\n  observeEvent(input$select_all, {\n    data &lt;- loaded_data()\n    req(data, data$presidents_data)\n    \n    # Get reversed president list to match the UI\n    presidents &lt;- rev(data$presidents_data$president)\n    \n    updateCheckboxGroupInput(session, \"selected_presidents\",\n                             choices = presidents,\n                             selected = presidents)\n  })\n  \n  # Handle deselect all button\n  observeEvent(input$deselect_all, {\n    data &lt;- loaded_data()\n    req(data, data$presidents_data)\n    \n    # Get reversed president list to match the UI\n    presidents &lt;- rev(data$presidents_data$president)\n    \n    updateCheckboxGroupInput(session, \"selected_presidents\",\n                             choices = presidents,\n                             selected = character(0))\n  })\n  \n  # Export plot handler - with embedded URL in caption and more right space\n  observeEvent(input$export_plot, {\n    req(processed_data())\n    \n    # Use the ggplot object for export\n    p &lt;- create_ggplot()\n    \n    # Add caption with source URL to the ggplot\n    p &lt;- p + labs(\n      caption = paste0(\"Generated on \", Sys.Date(), \" from https://jhelvy.github.io/potus-econ-scorecard/\")\n    ) +\n    theme(\n      plot.title = element_text(face = \"bold\", size = 16),\n      plot.subtitle = element_text(size = 12),\n      plot.caption = element_text(size = 9, hjust = 0)\n    )\n    \n    # Show the plot in a modal with save instructions\n    showModal(\n      modalDialog(\n        title = \"Plot Export\",\n        size = \"l\",\n        plotOutput(\"export_plot_preview\", height = \"500px\"),\n        hr(),\n        tags$div(\n          style = \"text-align: center;\",\n          tags$p(\"To save this image, right-click on the plot above and select 'Save image as...'\")\n        ),\n        footer = tagList(\n          modalButton(\"Close\")\n        )\n      )\n    )\n    \n    output$export_plot_preview &lt;- renderPlot({\n      p\n    }, height = 500, width = 800, res = 100)  # Increased resolution for better quality\n  })\n  \n  # Export data handler - client-side download approach\n  observeEvent(input$export_data, {\n    req(processed_data())\n    export_data &lt;- processed_data() %&gt;%\n      mutate(\n        reference_type = if(input$reference_date == \"inauguration\") \"Inauguration Day\" else \"Day Before Election\",\n        data_generated = as.character(Sys.Date())\n      )\n    \n    # Create a unique ID for this download\n    download_id &lt;- paste0(\"download_\", round(runif(1, 1, 100000)))\n    \n    # Convert data to CSV format\n    csv_content &lt;- reactive({\n      # Create the header row\n      headers &lt;- paste(colnames(export_data), collapse = \",\")\n      \n      # Create data rows (escaping any commas in string fields)\n      rows &lt;- apply(export_data, 1, function(row) {\n        # Convert row values to character and handle special cases\n        row_vals &lt;- sapply(row, function(val) {\n          if (is.character(val) && grepl(\",\", val)) {\n            # Wrap strings containing commas in quotes\n            return(paste0('\"', val, '\"'))\n          } else {\n            return(as.character(val))\n          }\n        })\n        paste(row_vals, collapse = \",\")\n      })\n      \n      # Combine header and rows\n      csv_data &lt;- paste(c(headers, rows), collapse = \"\\n\")\n      return(csv_data)\n    })\n    \n    # Get index name for the filename\n    index_name &lt;- switch(input$selected_index,\n                       \"sp500\" = \"SP500\",\n                       \"djia\" = \"DowJones\",\n                       \"nasdaq\" = \"NASDAQ\",\n                       \"dxy\" = \"USDollarIndex\",\n                       \"unemployment\" = \"Unemployment\",\n                       \"inflation\" = \"Inflation\",\n                       \"treasury10yr\" = \"TreasuryYield\",\n                       \"housing\" = \"HomePriceIndex\",\n                       \"gdp\" = \"RealGDP\",\n                       \"debt_gdp\" = \"DebtToGDP\",\n                       \"labor_participation\" = \"LaborParticipation\")\n    \n    filename &lt;- paste0(index_name, \"_data_\", Sys.Date(), \".csv\")\n    \n    # Create modal with preview and client-side download link\n    showModal(\n      modalDialog(\n        title = \"Data Export\",\n        size = \"l\",\n        p(\"The complete dataset is ready for download.\"),\n        p(paste0(\"Number of rows in dataset: \", nrow(export_data))),\n        \n        # Display a small preview of the data\n        tags$div(\n          style = \"max-height: 300px; overflow-y: auto;\",\n          renderTable({\n            head(export_data, 10)  # Show just first 10 rows as preview\n          })\n        ),\n        \n        # Add JavaScript to enable client-side download\n        tags$script(HTML(sprintf(\n          \"\n          function downloadCSV() {\n            var csvContent = %s;\n            var blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n            var link = document.createElement('a');\n            link.href = URL.createObjectURL(blob);\n            link.setAttribute('download', '%s');\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          }\n          \",\n          paste0(\"document.getElementById('\", download_id, \"').getAttribute('data-csv')\"),\n          filename\n        ))),\n        \n        # Hidden span to store the CSV data\n        tags$span(\n          id = download_id,\n          style = \"display: none;\",\n          `data-csv` = csv_content()\n        ),\n        \n        footer = tagList(\n          modalButton(\"Close\"),\n          tags$button(\n            \"Download Complete Dataset\",\n            class = \"btn btn-primary\",\n            onclick = \"downloadCSV()\"\n          )\n        )\n      )\n    )\n  })\n}\n\n#-------------------------------------------\n# Run the application\n#-------------------------------------------\nshinyApp(ui, server)"
  }
]