{"title":"Load required libraries","markdown":{"yaml":{"format":{"html":{"resources":["shinylive-sw.js"]}},"filters":["shinylive"]},"headingText":"Load required libraries","containsRefs":false,"markdown":"\n\n<center>\nThis can take ~30s to load as it runs entirely in your browser...just leave the window open until it loads<br>\n</center>\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 1100\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggrepel)\nlibrary(plotly)\n\n#-------------------------------------------\n# Data Loading and Processing Functions ----\n#-------------------------------------------\n\n# Function to load prepared data\nload_data <- function() {\n  # URL for the data files in GitHub\n  market_data_url <- \"https://raw.githubusercontent.com/jhelvy/potus-econ-scorecard/refs/heads/main/market_data.csv\"\n  presidents_data_url <- \"https://raw.githubusercontent.com/jhelvy/potus-econ-scorecard/refs/heads/main/presidents_data.csv\"\n  \n  # Load data\n  tryCatch({\n    market_data_raw <- read.csv(market_data_url)\n    presidents_data <- read.csv(presidents_data_url, stringsAsFactors = FALSE)\n    \n    # Convert date column to Date type\n    market_data_raw$date <- as.Date(market_data_raw$date)\n    presidents_data$inauguration_date <- as.Date(presidents_data$inauguration_date)\n    presidents_data$election_date <- as.Date(presidents_data$election_date)\n    \n    # Organize market data by index\n    market_data <- split(market_data_raw, market_data_raw$index_id)\n    \n    return(list(\n      market_data = market_data,\n      presidents_data = presidents_data\n    ))\n  }, error = function(e) {\n    # Return empty data frames if loading fails\n    warning(\"Error loading data: \", e$message)\n    return(list(\n      market_data = list(),\n      presidents_data = data.frame()\n    ))\n  })\n}\n\n# Function to process market data for selected presidents and reference date\nprocess_market_data <- function(market_data, \n                                presidents_data,\n                                selected_index,\n                                selected_presidents,\n                                reference_type,\n                                party_filter,\n                                days_to_show) {\n  \n  # Check if market data is available\n  if (is.null(market_data) || length(market_data) == 0) {\n    return(data.frame())\n  }\n  \n  # Get index data\n  index_data_list <- list(market_data[[selected_index]])\n  names(index_data_list) <- selected_index\n  \n  # Filter presidents by party and selection\n  filtered_presidents <- presidents_data %>%\n    filter(party %in% party_filter, president %in% selected_presidents)\n  \n  # If no presidents selected, return empty dataframe\n  if (nrow(filtered_presidents) == 0) {\n    return(data.frame())\n  }\n  \n  # Process data for each selected president and index\n  result_data <- data.frame()\n  \n  for (pres_i in 1:nrow(filtered_presidents)) {\n    pres_row <- filtered_presidents[pres_i, ]\n    \n    # Determine reference date based on user selection\n    ref_date <- if (reference_type == \"inauguration\") {\n      pres_row$inauguration_date\n    } else {\n      pres_row$election_date\n    }\n    \n    # Process each index\n    for (idx_id in names(index_data_list)) {\n      index_data <- index_data_list[[idx_id]]\n      \n      # Find closest trading day to reference date\n      closest_ref_date <- index_data %>%\n        filter(date >= ref_date) %>%\n        arrange(date) %>%\n        slice(1) %>%\n        pull(date)\n      \n      if (length(closest_ref_date) == 0) {\n        # Skip if no suitable reference date found\n        next\n      }\n      \n      # Get the reference value\n      ref_value <- index_data %>%\n        filter(date == closest_ref_date) %>%\n        pull(value)\n      \n      # Calculate days from reference and percent change\n      pres_data <- index_data %>%\n        filter(date >= closest_ref_date) %>%\n        mutate(\n          president = pres_row$president,\n          party = pres_row$party,\n          day = as.numeric(difftime(date, closest_ref_date, units = \"days\")),\n          reference_value = ref_value,\n          percent_change = (value / ref_value - 1) * 100\n        ) %>%\n        filter(day <= days_to_show)\n      \n      result_data <- rbind(result_data, pres_data)\n    }\n  }\n  \n  return(result_data)\n}\n\n# Function to process economic indicator data that shouldn't use percent change\nprocess_econ_data <- function(market_data, \n                              presidents_data,\n                              selected_index,\n                              selected_presidents,\n                              reference_type,\n                              party_filter,\n                              days_to_show) {\n  \n  # Check if market data is available\n  if (is.null(market_data) || length(market_data) == 0) {\n    return(data.frame())\n  }\n  \n  # Get index data\n  index_data_list <- list(market_data[[selected_index]])\n  names(index_data_list) <- selected_index\n  \n  # Filter presidents by party and selection\n  filtered_presidents <- presidents_data %>%\n    filter(party %in% party_filter, president %in% selected_presidents)\n  \n  # If no presidents selected, return empty dataframe\n  if (nrow(filtered_presidents) == 0) {\n    return(data.frame())\n  }\n  \n  # Process data for each selected president and index\n  result_data <- data.frame()\n  \n  for (pres_i in 1:nrow(filtered_presidents)) {\n    pres_row <- filtered_presidents[pres_i, ]\n    \n    # Determine reference date based on user selection\n    ref_date <- if (reference_type == \"inauguration\") {\n      pres_row$inauguration_date\n    } else {\n      pres_row$election_date\n    }\n    \n    # Process each index\n    for (idx_id in names(index_data_list)) {\n      index_data <- index_data_list[[idx_id]]\n      \n      # Find closest day to reference date\n      closest_ref_date <- index_data %>%\n        filter(date >= ref_date) %>%\n        arrange(date) %>%\n        slice(1) %>%\n        pull(date)\n      \n      if (length(closest_ref_date) == 0) {\n        # Skip if no suitable reference date found\n        next\n      }\n      \n      # For economic indicators, we show absolute values (not percent change)\n      pres_data <- index_data %>%\n        filter(date >= closest_ref_date) %>%\n        mutate(\n          president = pres_row$president,\n          party = pres_row$party,\n          day = as.numeric(difftime(date, closest_ref_date, units = \"days\"))\n        ) %>%\n        filter(day <= days_to_show)\n      \n      result_data <- rbind(result_data, pres_data)\n    }\n  }\n  \n  return(result_data)\n}\n\n#-------------------------------------------\n# UI Definition ----\n#-------------------------------------------\n\nui <- fluidPage(\n\n  titlePanel(\"\"),\n\n  sidebarLayout(\n    sidebarPanel(\n      # Index selection\n      radioButtons(\"selected_index\", \"Select Economic Indicator:\",\n                   choices = list(\n                     \"S&P 500\" = \"sp500\", \n                     \"Dow Jones\" = \"djia\",\n                     \"NASDAQ\" = \"nasdaq\",\n                     \"Unemployment Rate\" = \"unemployment\",\n                     \"Inflation Rate\" = \"inflation\"\n                   ),\n                   selected = \"sp500\"),\n      \n      # Baseline selection\n      radioButtons(\"reference_date\", \"Reference Date:\",\n                   choices = list(\n                     \"Inauguration Day\" = \"inauguration\", \n                     \"Day Before Election\" = \"election\"\n                   ),\n                   selected = \"inauguration\"),\n      \n      # Time period selection\n      sliderInput(\"time_period\", \"Days to Display:\",\n                  min = 10, max = 365*4, value = 100, step = 10),\n      \n      # Party filter\n      checkboxGroupInput(\"party_filter\", \"Filter by Party:\",\n                         choices = c(\"Democratic\", \"Republican\"),\n                         selected = c(\"Democratic\", \"Republican\")),\n      \n      # President selection buttons\n      div(\n        style = \"display: flex; justify-content: space-between; margin-bottom: 10px;\",\n        actionButton(\"select_all\", \"Select All\", class = \"btn-sm\"),\n        actionButton(\"deselect_all\", \"Deselect All\", class = \"btn-sm\")\n      ),\n      \n      # President checkboxes (dynamic)\n      uiOutput(\"president_selection\")\n    ),\n    \n    # Main content\n    mainPanel(\n      plotlyOutput(\"economic_plot\", height = \"100%\"),\n      div(\n        style = \"display: flex; justify-content: flex-end; margin-top: 10px;\",\n        actionButton(\"export_plot\", \"Export Plot\", class = \"btn-sm\"),\n        actionButton(\"export_data\", \"Export Data\", class = \"btn-sm\")\n      ),\n      uiOutput(\"export_modal\")\n    )\n  )\n)\n\n#-------------------------------------------\n# Server Logic ----\n#-------------------------------------------\n\nserver <- function(input, output, session) {\n  \n  # Reactive values to store loaded data\n  loaded_data <- reactiveVal(NULL)\n  \n  # Show loading message\n  showModal(modalDialog(\n    title = \"Loading Data\",\n    \"Loading economic data. This may take a moment...\",\n    footer = NULL,\n    easyClose = FALSE\n  ))\n  \n  # Load data on startup\n  observe({\n    # Get data\n    data_list <- load_data()\n    \n    # Store the data\n    loaded_data(data_list)\n    \n    # Remove loading message\n    removeModal()\n  })\n  \n  # Dynamic UI for president selection - reversed order\n  output$president_selection <- renderUI({\n    data <- loaded_data()\n    \n    if (is.null(data) || nrow(data$presidents_data) == 0) {\n      return(NULL)\n    }\n    \n    # Get presidents from data and reverse the order\n    presidents <- rev(data$presidents_data$president)\n    \n    # Return checkbox group input with reversed order\n    checkboxGroupInput(\"selected_presidents\", \n                       \"Select Presidents:\", \n                       choices = presidents,\n                       selected = head(presidents, 4)) # Select the first 4 presidents in the reversed list (most recent)\n  })\n  \n  # Process data based on user selections\n  processed_data <- reactive({\n    # Get data\n    data <- loaded_data()\n    \n    # Make sure data is loaded\n    req(data, data$market_data, input$selected_presidents)\n    \n    # Get user selections\n    selected_index <- input$selected_index\n    reference_type <- input$reference_date\n    selected_presidents <- input$selected_presidents\n    party_filter <- input$party_filter\n    days_to_show <- input$time_period\n    \n    # Choose the appropriate processing function based on the selected index\n    if (selected_index %in% c(\"unemployment\", \"inflation\")) {\n      # For economic indicators, use absolute values\n      return(process_econ_data(\n        data$market_data,\n        data$presidents_data,\n        selected_index,\n        selected_presidents,\n        reference_type,\n        party_filter,\n        days_to_show\n      ))\n    } else {\n      # For market indices, use percent change from reference date\n      return(process_market_data(\n        data$market_data,\n        data$presidents_data,\n        selected_index,\n        selected_presidents,\n        reference_type,\n        party_filter,\n        days_to_show\n      ))\n    }\n  })\n  \n  # Render the plot\n  output$economic_plot <- renderPlotly({\n    # Get processed data\n    plot_data <- processed_data()\n    \n    # Make sure there's data to plot\n    req(nrow(plot_data) > 0)\n    \n    # Reference type for title\n    ref_type <- if (input$reference_date == \"inauguration\") {\n      \"Inauguration Day\"\n    } else {\n      \"Day Before Election\"\n    }\n    \n    # Define party colors\n    party_colors <- c(\"Democratic\" = \"blue\", \"Republican\" = \"red\")\n    \n    if (input$selected_index %in% c(\"unemployment\", \"inflation\")) {\n      # Plot for economic indicators (absolute values)\n      index_name <- unique(plot_data$index_name)[1]\n      \n      # Get end points for each president\n      end_points <- plot_data %>% \n        group_by(president, party) %>% \n        filter(day == max(day)) %>%\n        mutate(label = paste0(president, \" (\", round(value, 1), \")\"))\n      \n      # Create base ggplot with enhanced tooltips\n      p <- ggplot(plot_data, aes(x = day, y = value, color = party, group = president, \n                                 text = paste0(president, \"<br>Day: \", day, \"<br>Value: \", round(value, 2)))) +\n        geom_line(size = 1, alpha = 0.8) +\n        geom_point(data = end_points, size = 3) +\n        scale_color_manual(values = party_colors) +\n        labs(\n          title = paste(index_name, \"Since\", ref_type),\n          subtitle = paste0(\"Showing first \", input$time_period, \" days\"),\n          x = paste(\"Days Since\", ref_type),\n          y = index_name,\n          color = \"Party\"  # Capitalize Party in legend\n        ) +\n        theme_minimal() +\n        theme(\n          plot.title = element_text(face = \"bold\"),\n          panel.grid.minor = element_blank(),\n          legend.position = \"bottom\"\n        ) +\n        # Add extra space on right for labels\n        coord_cartesian(xlim = c(0, max(plot_data$day) * 1.3))\n      \n      # For unemployment and inflation, we might want to set y-limits\n      if (input$selected_index == \"unemployment\") {\n        p <- p + ylim(0, max(plot_data$value) * 1.1)  # Ensure we start at 0 for unemployment\n      }\n      \n      # Convert to plotly\n      p_ly <- ggplotly(p, tooltip = \"text\") %>%\n        layout(\n          legend = list(orientation = \"h\", y = -0.2),\n          # Add more space on the right margin for labels\n          margin = list(r = 100)\n        )\n      \n      # Add annotations for each end point\n      for (i in 1:nrow(end_points)) {\n        point <- end_points[i, ]\n        \n        p_ly <- p_ly %>% \n          add_annotations(\n            x = point$day,\n            y = point$value,\n            text = point$label,\n            showarrow = TRUE,\n            arrowhead = 0,\n            arrowsize = 0.7,\n            arrowwidth = 1,\n            arrowcolor = \"gray70\",\n            xanchor = \"left\",\n            yanchor = \"middle\",\n            textangle = 0,\n            font = list(color = \"black\", size = 11),\n            ax = 50,\n            ay = 0\n          )\n      }\n      \n      return(p_ly)\n      \n    } else {\n      # Plot for a single market index (percent change)\n      index_name <- unique(plot_data$index_name)[1]\n      \n      # Get end points for each president\n      end_points <- plot_data %>% \n        group_by(president, party) %>% \n        filter(day == max(day)) %>%\n        mutate(label = paste0(president, \" (\", round(percent_change, 1), \"%)\"))\n      \n      # Create base ggplot with enhanced tooltips\n      p <- ggplot(plot_data, aes(x = day, y = percent_change, color = party, group = president, \n                                 text = paste0(president, \"<br>Day: \", day, \"<br>Change: \", round(percent_change, 2), \"%\"))) +\n        geom_line(size = 1, alpha = 0.8) +\n        geom_point(data = end_points, size = 3) +\n        geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n        scale_color_manual(values = party_colors) +\n        labs(\n          title = paste(index_name, \"Performance Since\", ref_type),\n          subtitle = paste0(\"Showing first \", input$time_period, \" days (0% = value on reference date)\"),\n          x = paste(\"Days Since\", ref_type),\n          y = \"Percent Change (%)\",\n          color = \"Party\"  # Capitalize Party in legend\n        ) +\n        theme_minimal() +\n        theme(\n          plot.title = element_text(face = \"bold\"),\n          panel.grid.minor = element_blank(),\n          legend.position = \"bottom\"\n        ) +\n        # Add extra space on right for labels\n        coord_cartesian(xlim = c(0, max(plot_data$day) * 1.3))\n      \n      # Convert to plotly\n      p_ly <- ggplotly(p, tooltip = \"text\") %>%\n        layout(\n          legend = list(orientation = \"h\", y = -0.2),\n          # Add more space on the right margin for labels\n          margin = list(r = 100)\n        )\n      \n      # Add zero line\n      p_ly <- p_ly %>% \n        add_segments(x = 0, xend = max(plot_data$day) * 1.3, \n                     y = 0, yend = 0,\n                     line = list(dash = \"dash\", color = \"gray\", width = 1),\n                     showlegend = FALSE, \n                     hoverinfo = \"none\")\n      \n      # Add annotations manually for each end point\n      for (i in 1:nrow(end_points)) {\n        point <- end_points[i, ]\n        \n        p_ly <- p_ly %>% \n          add_annotations(\n            x = point$day,\n            y = point$percent_change,\n            text = point$label,  # Include percentage in label\n            showarrow = TRUE,\n            arrowhead = 0,\n            arrowsize = 0.7,\n            arrowwidth = 1,\n            arrowcolor = \"gray70\",\n            xanchor = \"left\",\n            yanchor = \"middle\",\n            textangle = 0,\n            font = list(color = \"black\", size = 11),\n            ax = 50,  # Increased offset for better visibility\n            ay = 0\n          )\n      }\n      \n      return(p_ly)\n    }\n  })\n  \n  # Handle select all button\n  observeEvent(input$select_all, {\n    data <- loaded_data()\n    req(data, data$presidents_data)\n    \n    # Get reversed president list to match the UI\n    presidents <- rev(data$presidents_data$president)\n    \n    updateCheckboxGroupInput(session, \"selected_presidents\",\n                             choices = presidents,\n                             selected = presidents)\n  })\n  \n  # Handle deselect all button\n  observeEvent(input$deselect_all, {\n    data <- loaded_data()\n    req(data, data$presidents_data)\n    \n    # Get reversed president list to match the UI\n    presidents <- rev(data$presidents_data$president)\n    \n    updateCheckboxGroupInput(session, \"selected_presidents\",\n                             choices = presidents,\n                             selected = character(0))\n  })\n  \n  # Export plot handler - with embedded URL in caption and more right space\n  observeEvent(input$export_plot, {\n    req(processed_data())\n    plot_data <- processed_data()\n    \n    # Reference type for title\n    ref_type <- if (input$reference_date == \"inauguration\") {\n      \"Inauguration Day\"\n    } else {\n      \"Day Before Election\"\n    }\n    \n    # Define party colors\n    party_colors <- c(\"Democratic\" = \"blue\", \"Republican\" = \"red\")\n    \n    # Create a static plot with ggrepel labels for download\n    if (input$selected_index %in% c(\"unemployment\", \"inflation\")) {\n      # Plot for economic indicators\n      index_name <- unique(plot_data$index_name)[1]\n      \n      # Create end labels data\n      end_labels <- plot_data %>% \n        group_by(president) %>% \n        filter(day == max(day)) %>%\n        mutate(label = paste0(president, \" (\", round(value, 1), \")\"))\n      \n      # Create ggplot with embedded URL in caption and more right space\n      p <- ggplot(plot_data, aes(x = day, y = value, color = party, group = president)) +\n        geom_line(size = 1) +\n        geom_point(data = end_labels, size = 3) +\n        # Add end labels\n        geom_text_repel(\n          data = end_labels,\n          aes(label = label),\n          direction = \"y\",\n          hjust = 0,\n          vjust = 0,\n          nudge_x = 5,\n          force = 3,\n          segment.size = 0.2,\n          box.padding = 0.5,\n          show.legend = FALSE\n        ) +\n        scale_color_manual(values = party_colors) +\n        labs(\n          title = paste(index_name, \"Since\", ref_type),\n          subtitle = paste0(\"Showing first \", input$time_period, \" days\"),\n          x = paste(\"Days Since\", ref_type),\n          y = index_name,\n          caption = paste0(\"Generated on \", Sys.Date(), \" from https://jhelvy.github.io/potus-econ-scorecard/\"),\n          color = \"Party\"\n        ) +\n        theme_minimal() +\n        theme(\n          plot.title = element_text(face = \"bold\", size = 16),\n          plot.subtitle = element_text(size = 12),\n          panel.grid.minor = element_blank(),\n          legend.position = \"bottom\",\n          legend.title = element_text(face = \"bold\"),\n          axis.title = element_text(face = \"bold\"),\n          plot.caption = element_text(size = 9, hjust = 0)\n        ) +\n        coord_cartesian(xlim = c(0, max(plot_data$day) * 1.3))  # More right space\n      \n      # Set y-limits for unemployment to start at 0\n      if (input$selected_index == \"unemployment\") {\n        p <- p + ylim(0, max(plot_data$value) * 1.1)\n      }\n    } else {\n      # Plot for a single market index\n      index_name <- unique(plot_data$index_name)[1]\n      \n      # Create end labels data\n      end_labels <- plot_data %>% \n        group_by(president) %>% \n        filter(day == max(day)) %>%\n        mutate(label = paste0(president, \" (\", round(percent_change, 1), \"%)\"))\n      \n      # Create ggplot with embedded URL in caption and more right space\n      p <- ggplot(plot_data, aes(x = day, y = percent_change, color = party, group = president)) +\n        geom_line(size = 1) +\n        geom_point(data = end_labels, size = 3) +\n        # Add end labels\n        geom_text_repel(\n          data = end_labels,\n          aes(label = label),\n          direction = \"y\",\n          hjust = 0,\n          vjust = 0,\n          nudge_x = 5,\n          force = 3,\n          segment.size = 0.2,\n          box.padding = 0.5,\n          show.legend = FALSE\n        ) +\n        geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n        scale_color_manual(values = party_colors) +\n        labs(\n          title = paste(index_name, \"Performance Since\", ref_type),\n          subtitle = paste0(\"Showing first \", input$time_period, \" days (0% = value on reference date)\"),\n          x = paste(\"Days Since\", ref_type),\n          y = \"Percent Change (%)\",\n          caption = paste0(\"Generated on \", Sys.Date(), \" from https://jhelvy.github.io/potus-econ-scorecard/\"),\n          color = \"Party\"\n        ) +\n        theme_minimal() +\n        theme(\n          plot.title = element_text(face = \"bold\", size = 16),\n          plot.subtitle = element_text(size = 12),\n          panel.grid.minor = element_blank(),\n          legend.position = \"bottom\",\n          legend.title = element_text(face = \"bold\"),\n          axis.title = element_text(face = \"bold\"),\n          plot.caption = element_text(size = 9, hjust = 0)\n        ) +\n        coord_cartesian(xlim = c(0, max(plot_data$day) * 1.3))  # More right space\n    }\n    \n    # Show the plot in a modal with save instructions\n    showModal(\n      modalDialog(\n        title = \"Plot Export\",\n        size = \"l\",\n        plotOutput(\"export_plot_preview\", height = \"500px\"),\n        hr(),\n        tags$div(\n          style = \"text-align: center;\",\n          tags$p(\"To save this image, right-click on the plot above and select 'Save image as...'\")\n        ),\n        footer = tagList(\n          modalButton(\"Close\")\n        )\n      )\n    )\n    \n    output$export_plot_preview <- renderPlot({\n      p\n    }, height = 500, width = 800, res = 100)  # Increased resolution for better quality\n  })\n  \n  # Export data handler - client-side download approach\n  observeEvent(input$export_data, {\n    req(processed_data())\n    export_data <- processed_data() %>%\n      mutate(\n        reference_type = if(input$reference_date == \"inauguration\") \"Inauguration Day\" else \"Day Before Election\",\n        data_generated = as.character(Sys.Date())\n      )\n    \n    # Create a unique ID for this download\n    download_id <- paste0(\"download_\", round(runif(1, 1, 100000)))\n    \n    # Convert data to CSV format\n    csv_content <- reactive({\n      # Create the header row\n      headers <- paste(colnames(export_data), collapse = \",\")\n      \n      # Create data rows (escaping any commas in string fields)\n      rows <- apply(export_data, 1, function(row) {\n        # Convert row values to character and handle special cases\n        row_vals <- sapply(row, function(val) {\n          if (is.character(val) && grepl(\",\", val)) {\n            # Wrap strings containing commas in quotes\n            return(paste0('\"', val, '\"'))\n          } else {\n            return(as.character(val))\n          }\n        })\n        paste(row_vals, collapse = \",\")\n      })\n      \n      # Combine header and rows\n      csv_data <- paste(c(headers, rows), collapse = \"\\n\")\n      return(csv_data)\n    })\n    \n    # Get index name for the filename\n    index_name <- switch(input$selected_index,\n                       \"sp500\" = \"SP500\",\n                       \"djia\" = \"DowJones\",\n                       \"nasdaq\" = \"NASDAQ\",\n                       \"unemployment\" = \"Unemployment\",\n                       \"inflation\" = \"Inflation\")\n    \n    filename <- paste0(index_name, \"_data_\", Sys.Date(), \".csv\")\n    \n    # Create modal with preview and client-side download link\n    showModal(\n      modalDialog(\n        title = \"Data Export\",\n        size = \"l\",\n        p(\"The complete dataset is ready for download.\"),\n        p(paste0(\"Number of rows in dataset: \", nrow(export_data))),\n        \n        # Display a small preview of the data\n        tags$div(\n          style = \"max-height: 300px; overflow-y: auto;\",\n          renderTable({\n            head(export_data, 10)  # Show just first 10 rows as preview\n          })\n        ),\n        \n        # Add JavaScript to enable client-side download\n        tags$script(HTML(sprintf(\n          \"\n          function downloadCSV() {\n            var csvContent = %s;\n            var blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n            var link = document.createElement('a');\n            link.href = URL.createObjectURL(blob);\n            link.setAttribute('download', '%s');\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          }\n          \",\n          paste0(\"document.getElementById('\", download_id, \"').getAttribute('data-csv')\"),\n          filename\n        ))),\n        \n        # Hidden span to store the CSV data\n        tags$span(\n          id = download_id,\n          style = \"display: none;\",\n          `data-csv` = csv_content()\n        ),\n        \n        footer = tagList(\n          modalButton(\"Close\"),\n          tags$button(\n            \"Download Complete Dataset\",\n            class = \"btn btn-primary\",\n            onclick = \"downloadCSV()\"\n          )\n        )\n      )\n    )\n  })\n}\n\n#-------------------------------------------\n# Run the application\n#-------------------------------------------\nshinyApp(ui, server)\n```\n","srcMarkdownNoYaml":"\n\n<center>\nThis can take ~30s to load as it runs entirely in your browser...just leave the window open until it loads<br>\n</center>\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 1100\n\n# Load required libraries\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggrepel)\nlibrary(plotly)\n\n#-------------------------------------------\n# Data Loading and Processing Functions ----\n#-------------------------------------------\n\n# Function to load prepared data\nload_data <- function() {\n  # URL for the data files in GitHub\n  market_data_url <- \"https://raw.githubusercontent.com/jhelvy/potus-econ-scorecard/refs/heads/main/market_data.csv\"\n  presidents_data_url <- \"https://raw.githubusercontent.com/jhelvy/potus-econ-scorecard/refs/heads/main/presidents_data.csv\"\n  \n  # Load data\n  tryCatch({\n    market_data_raw <- read.csv(market_data_url)\n    presidents_data <- read.csv(presidents_data_url, stringsAsFactors = FALSE)\n    \n    # Convert date column to Date type\n    market_data_raw$date <- as.Date(market_data_raw$date)\n    presidents_data$inauguration_date <- as.Date(presidents_data$inauguration_date)\n    presidents_data$election_date <- as.Date(presidents_data$election_date)\n    \n    # Organize market data by index\n    market_data <- split(market_data_raw, market_data_raw$index_id)\n    \n    return(list(\n      market_data = market_data,\n      presidents_data = presidents_data\n    ))\n  }, error = function(e) {\n    # Return empty data frames if loading fails\n    warning(\"Error loading data: \", e$message)\n    return(list(\n      market_data = list(),\n      presidents_data = data.frame()\n    ))\n  })\n}\n\n# Function to process market data for selected presidents and reference date\nprocess_market_data <- function(market_data, \n                                presidents_data,\n                                selected_index,\n                                selected_presidents,\n                                reference_type,\n                                party_filter,\n                                days_to_show) {\n  \n  # Check if market data is available\n  if (is.null(market_data) || length(market_data) == 0) {\n    return(data.frame())\n  }\n  \n  # Get index data\n  index_data_list <- list(market_data[[selected_index]])\n  names(index_data_list) <- selected_index\n  \n  # Filter presidents by party and selection\n  filtered_presidents <- presidents_data %>%\n    filter(party %in% party_filter, president %in% selected_presidents)\n  \n  # If no presidents selected, return empty dataframe\n  if (nrow(filtered_presidents) == 0) {\n    return(data.frame())\n  }\n  \n  # Process data for each selected president and index\n  result_data <- data.frame()\n  \n  for (pres_i in 1:nrow(filtered_presidents)) {\n    pres_row <- filtered_presidents[pres_i, ]\n    \n    # Determine reference date based on user selection\n    ref_date <- if (reference_type == \"inauguration\") {\n      pres_row$inauguration_date\n    } else {\n      pres_row$election_date\n    }\n    \n    # Process each index\n    for (idx_id in names(index_data_list)) {\n      index_data <- index_data_list[[idx_id]]\n      \n      # Find closest trading day to reference date\n      closest_ref_date <- index_data %>%\n        filter(date >= ref_date) %>%\n        arrange(date) %>%\n        slice(1) %>%\n        pull(date)\n      \n      if (length(closest_ref_date) == 0) {\n        # Skip if no suitable reference date found\n        next\n      }\n      \n      # Get the reference value\n      ref_value <- index_data %>%\n        filter(date == closest_ref_date) %>%\n        pull(value)\n      \n      # Calculate days from reference and percent change\n      pres_data <- index_data %>%\n        filter(date >= closest_ref_date) %>%\n        mutate(\n          president = pres_row$president,\n          party = pres_row$party,\n          day = as.numeric(difftime(date, closest_ref_date, units = \"days\")),\n          reference_value = ref_value,\n          percent_change = (value / ref_value - 1) * 100\n        ) %>%\n        filter(day <= days_to_show)\n      \n      result_data <- rbind(result_data, pres_data)\n    }\n  }\n  \n  return(result_data)\n}\n\n# Function to process economic indicator data that shouldn't use percent change\nprocess_econ_data <- function(market_data, \n                              presidents_data,\n                              selected_index,\n                              selected_presidents,\n                              reference_type,\n                              party_filter,\n                              days_to_show) {\n  \n  # Check if market data is available\n  if (is.null(market_data) || length(market_data) == 0) {\n    return(data.frame())\n  }\n  \n  # Get index data\n  index_data_list <- list(market_data[[selected_index]])\n  names(index_data_list) <- selected_index\n  \n  # Filter presidents by party and selection\n  filtered_presidents <- presidents_data %>%\n    filter(party %in% party_filter, president %in% selected_presidents)\n  \n  # If no presidents selected, return empty dataframe\n  if (nrow(filtered_presidents) == 0) {\n    return(data.frame())\n  }\n  \n  # Process data for each selected president and index\n  result_data <- data.frame()\n  \n  for (pres_i in 1:nrow(filtered_presidents)) {\n    pres_row <- filtered_presidents[pres_i, ]\n    \n    # Determine reference date based on user selection\n    ref_date <- if (reference_type == \"inauguration\") {\n      pres_row$inauguration_date\n    } else {\n      pres_row$election_date\n    }\n    \n    # Process each index\n    for (idx_id in names(index_data_list)) {\n      index_data <- index_data_list[[idx_id]]\n      \n      # Find closest day to reference date\n      closest_ref_date <- index_data %>%\n        filter(date >= ref_date) %>%\n        arrange(date) %>%\n        slice(1) %>%\n        pull(date)\n      \n      if (length(closest_ref_date) == 0) {\n        # Skip if no suitable reference date found\n        next\n      }\n      \n      # For economic indicators, we show absolute values (not percent change)\n      pres_data <- index_data %>%\n        filter(date >= closest_ref_date) %>%\n        mutate(\n          president = pres_row$president,\n          party = pres_row$party,\n          day = as.numeric(difftime(date, closest_ref_date, units = \"days\"))\n        ) %>%\n        filter(day <= days_to_show)\n      \n      result_data <- rbind(result_data, pres_data)\n    }\n  }\n  \n  return(result_data)\n}\n\n#-------------------------------------------\n# UI Definition ----\n#-------------------------------------------\n\nui <- fluidPage(\n\n  titlePanel(\"\"),\n\n  sidebarLayout(\n    sidebarPanel(\n      # Index selection\n      radioButtons(\"selected_index\", \"Select Economic Indicator:\",\n                   choices = list(\n                     \"S&P 500\" = \"sp500\", \n                     \"Dow Jones\" = \"djia\",\n                     \"NASDAQ\" = \"nasdaq\",\n                     \"Unemployment Rate\" = \"unemployment\",\n                     \"Inflation Rate\" = \"inflation\"\n                   ),\n                   selected = \"sp500\"),\n      \n      # Baseline selection\n      radioButtons(\"reference_date\", \"Reference Date:\",\n                   choices = list(\n                     \"Inauguration Day\" = \"inauguration\", \n                     \"Day Before Election\" = \"election\"\n                   ),\n                   selected = \"inauguration\"),\n      \n      # Time period selection\n      sliderInput(\"time_period\", \"Days to Display:\",\n                  min = 10, max = 365*4, value = 100, step = 10),\n      \n      # Party filter\n      checkboxGroupInput(\"party_filter\", \"Filter by Party:\",\n                         choices = c(\"Democratic\", \"Republican\"),\n                         selected = c(\"Democratic\", \"Republican\")),\n      \n      # President selection buttons\n      div(\n        style = \"display: flex; justify-content: space-between; margin-bottom: 10px;\",\n        actionButton(\"select_all\", \"Select All\", class = \"btn-sm\"),\n        actionButton(\"deselect_all\", \"Deselect All\", class = \"btn-sm\")\n      ),\n      \n      # President checkboxes (dynamic)\n      uiOutput(\"president_selection\")\n    ),\n    \n    # Main content\n    mainPanel(\n      plotlyOutput(\"economic_plot\", height = \"100%\"),\n      div(\n        style = \"display: flex; justify-content: flex-end; margin-top: 10px;\",\n        actionButton(\"export_plot\", \"Export Plot\", class = \"btn-sm\"),\n        actionButton(\"export_data\", \"Export Data\", class = \"btn-sm\")\n      ),\n      uiOutput(\"export_modal\")\n    )\n  )\n)\n\n#-------------------------------------------\n# Server Logic ----\n#-------------------------------------------\n\nserver <- function(input, output, session) {\n  \n  # Reactive values to store loaded data\n  loaded_data <- reactiveVal(NULL)\n  \n  # Show loading message\n  showModal(modalDialog(\n    title = \"Loading Data\",\n    \"Loading economic data. This may take a moment...\",\n    footer = NULL,\n    easyClose = FALSE\n  ))\n  \n  # Load data on startup\n  observe({\n    # Get data\n    data_list <- load_data()\n    \n    # Store the data\n    loaded_data(data_list)\n    \n    # Remove loading message\n    removeModal()\n  })\n  \n  # Dynamic UI for president selection - reversed order\n  output$president_selection <- renderUI({\n    data <- loaded_data()\n    \n    if (is.null(data) || nrow(data$presidents_data) == 0) {\n      return(NULL)\n    }\n    \n    # Get presidents from data and reverse the order\n    presidents <- rev(data$presidents_data$president)\n    \n    # Return checkbox group input with reversed order\n    checkboxGroupInput(\"selected_presidents\", \n                       \"Select Presidents:\", \n                       choices = presidents,\n                       selected = head(presidents, 4)) # Select the first 4 presidents in the reversed list (most recent)\n  })\n  \n  # Process data based on user selections\n  processed_data <- reactive({\n    # Get data\n    data <- loaded_data()\n    \n    # Make sure data is loaded\n    req(data, data$market_data, input$selected_presidents)\n    \n    # Get user selections\n    selected_index <- input$selected_index\n    reference_type <- input$reference_date\n    selected_presidents <- input$selected_presidents\n    party_filter <- input$party_filter\n    days_to_show <- input$time_period\n    \n    # Choose the appropriate processing function based on the selected index\n    if (selected_index %in% c(\"unemployment\", \"inflation\")) {\n      # For economic indicators, use absolute values\n      return(process_econ_data(\n        data$market_data,\n        data$presidents_data,\n        selected_index,\n        selected_presidents,\n        reference_type,\n        party_filter,\n        days_to_show\n      ))\n    } else {\n      # For market indices, use percent change from reference date\n      return(process_market_data(\n        data$market_data,\n        data$presidents_data,\n        selected_index,\n        selected_presidents,\n        reference_type,\n        party_filter,\n        days_to_show\n      ))\n    }\n  })\n  \n  # Render the plot\n  output$economic_plot <- renderPlotly({\n    # Get processed data\n    plot_data <- processed_data()\n    \n    # Make sure there's data to plot\n    req(nrow(plot_data) > 0)\n    \n    # Reference type for title\n    ref_type <- if (input$reference_date == \"inauguration\") {\n      \"Inauguration Day\"\n    } else {\n      \"Day Before Election\"\n    }\n    \n    # Define party colors\n    party_colors <- c(\"Democratic\" = \"blue\", \"Republican\" = \"red\")\n    \n    if (input$selected_index %in% c(\"unemployment\", \"inflation\")) {\n      # Plot for economic indicators (absolute values)\n      index_name <- unique(plot_data$index_name)[1]\n      \n      # Get end points for each president\n      end_points <- plot_data %>% \n        group_by(president, party) %>% \n        filter(day == max(day)) %>%\n        mutate(label = paste0(president, \" (\", round(value, 1), \")\"))\n      \n      # Create base ggplot with enhanced tooltips\n      p <- ggplot(plot_data, aes(x = day, y = value, color = party, group = president, \n                                 text = paste0(president, \"<br>Day: \", day, \"<br>Value: \", round(value, 2)))) +\n        geom_line(size = 1, alpha = 0.8) +\n        geom_point(data = end_points, size = 3) +\n        scale_color_manual(values = party_colors) +\n        labs(\n          title = paste(index_name, \"Since\", ref_type),\n          subtitle = paste0(\"Showing first \", input$time_period, \" days\"),\n          x = paste(\"Days Since\", ref_type),\n          y = index_name,\n          color = \"Party\"  # Capitalize Party in legend\n        ) +\n        theme_minimal() +\n        theme(\n          plot.title = element_text(face = \"bold\"),\n          panel.grid.minor = element_blank(),\n          legend.position = \"bottom\"\n        ) +\n        # Add extra space on right for labels\n        coord_cartesian(xlim = c(0, max(plot_data$day) * 1.3))\n      \n      # For unemployment and inflation, we might want to set y-limits\n      if (input$selected_index == \"unemployment\") {\n        p <- p + ylim(0, max(plot_data$value) * 1.1)  # Ensure we start at 0 for unemployment\n      }\n      \n      # Convert to plotly\n      p_ly <- ggplotly(p, tooltip = \"text\") %>%\n        layout(\n          legend = list(orientation = \"h\", y = -0.2),\n          # Add more space on the right margin for labels\n          margin = list(r = 100)\n        )\n      \n      # Add annotations for each end point\n      for (i in 1:nrow(end_points)) {\n        point <- end_points[i, ]\n        \n        p_ly <- p_ly %>% \n          add_annotations(\n            x = point$day,\n            y = point$value,\n            text = point$label,\n            showarrow = TRUE,\n            arrowhead = 0,\n            arrowsize = 0.7,\n            arrowwidth = 1,\n            arrowcolor = \"gray70\",\n            xanchor = \"left\",\n            yanchor = \"middle\",\n            textangle = 0,\n            font = list(color = \"black\", size = 11),\n            ax = 50,\n            ay = 0\n          )\n      }\n      \n      return(p_ly)\n      \n    } else {\n      # Plot for a single market index (percent change)\n      index_name <- unique(plot_data$index_name)[1]\n      \n      # Get end points for each president\n      end_points <- plot_data %>% \n        group_by(president, party) %>% \n        filter(day == max(day)) %>%\n        mutate(label = paste0(president, \" (\", round(percent_change, 1), \"%)\"))\n      \n      # Create base ggplot with enhanced tooltips\n      p <- ggplot(plot_data, aes(x = day, y = percent_change, color = party, group = president, \n                                 text = paste0(president, \"<br>Day: \", day, \"<br>Change: \", round(percent_change, 2), \"%\"))) +\n        geom_line(size = 1, alpha = 0.8) +\n        geom_point(data = end_points, size = 3) +\n        geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n        scale_color_manual(values = party_colors) +\n        labs(\n          title = paste(index_name, \"Performance Since\", ref_type),\n          subtitle = paste0(\"Showing first \", input$time_period, \" days (0% = value on reference date)\"),\n          x = paste(\"Days Since\", ref_type),\n          y = \"Percent Change (%)\",\n          color = \"Party\"  # Capitalize Party in legend\n        ) +\n        theme_minimal() +\n        theme(\n          plot.title = element_text(face = \"bold\"),\n          panel.grid.minor = element_blank(),\n          legend.position = \"bottom\"\n        ) +\n        # Add extra space on right for labels\n        coord_cartesian(xlim = c(0, max(plot_data$day) * 1.3))\n      \n      # Convert to plotly\n      p_ly <- ggplotly(p, tooltip = \"text\") %>%\n        layout(\n          legend = list(orientation = \"h\", y = -0.2),\n          # Add more space on the right margin for labels\n          margin = list(r = 100)\n        )\n      \n      # Add zero line\n      p_ly <- p_ly %>% \n        add_segments(x = 0, xend = max(plot_data$day) * 1.3, \n                     y = 0, yend = 0,\n                     line = list(dash = \"dash\", color = \"gray\", width = 1),\n                     showlegend = FALSE, \n                     hoverinfo = \"none\")\n      \n      # Add annotations manually for each end point\n      for (i in 1:nrow(end_points)) {\n        point <- end_points[i, ]\n        \n        p_ly <- p_ly %>% \n          add_annotations(\n            x = point$day,\n            y = point$percent_change,\n            text = point$label,  # Include percentage in label\n            showarrow = TRUE,\n            arrowhead = 0,\n            arrowsize = 0.7,\n            arrowwidth = 1,\n            arrowcolor = \"gray70\",\n            xanchor = \"left\",\n            yanchor = \"middle\",\n            textangle = 0,\n            font = list(color = \"black\", size = 11),\n            ax = 50,  # Increased offset for better visibility\n            ay = 0\n          )\n      }\n      \n      return(p_ly)\n    }\n  })\n  \n  # Handle select all button\n  observeEvent(input$select_all, {\n    data <- loaded_data()\n    req(data, data$presidents_data)\n    \n    # Get reversed president list to match the UI\n    presidents <- rev(data$presidents_data$president)\n    \n    updateCheckboxGroupInput(session, \"selected_presidents\",\n                             choices = presidents,\n                             selected = presidents)\n  })\n  \n  # Handle deselect all button\n  observeEvent(input$deselect_all, {\n    data <- loaded_data()\n    req(data, data$presidents_data)\n    \n    # Get reversed president list to match the UI\n    presidents <- rev(data$presidents_data$president)\n    \n    updateCheckboxGroupInput(session, \"selected_presidents\",\n                             choices = presidents,\n                             selected = character(0))\n  })\n  \n  # Export plot handler - with embedded URL in caption and more right space\n  observeEvent(input$export_plot, {\n    req(processed_data())\n    plot_data <- processed_data()\n    \n    # Reference type for title\n    ref_type <- if (input$reference_date == \"inauguration\") {\n      \"Inauguration Day\"\n    } else {\n      \"Day Before Election\"\n    }\n    \n    # Define party colors\n    party_colors <- c(\"Democratic\" = \"blue\", \"Republican\" = \"red\")\n    \n    # Create a static plot with ggrepel labels for download\n    if (input$selected_index %in% c(\"unemployment\", \"inflation\")) {\n      # Plot for economic indicators\n      index_name <- unique(plot_data$index_name)[1]\n      \n      # Create end labels data\n      end_labels <- plot_data %>% \n        group_by(president) %>% \n        filter(day == max(day)) %>%\n        mutate(label = paste0(president, \" (\", round(value, 1), \")\"))\n      \n      # Create ggplot with embedded URL in caption and more right space\n      p <- ggplot(plot_data, aes(x = day, y = value, color = party, group = president)) +\n        geom_line(size = 1) +\n        geom_point(data = end_labels, size = 3) +\n        # Add end labels\n        geom_text_repel(\n          data = end_labels,\n          aes(label = label),\n          direction = \"y\",\n          hjust = 0,\n          vjust = 0,\n          nudge_x = 5,\n          force = 3,\n          segment.size = 0.2,\n          box.padding = 0.5,\n          show.legend = FALSE\n        ) +\n        scale_color_manual(values = party_colors) +\n        labs(\n          title = paste(index_name, \"Since\", ref_type),\n          subtitle = paste0(\"Showing first \", input$time_period, \" days\"),\n          x = paste(\"Days Since\", ref_type),\n          y = index_name,\n          caption = paste0(\"Generated on \", Sys.Date(), \" from https://jhelvy.github.io/potus-econ-scorecard/\"),\n          color = \"Party\"\n        ) +\n        theme_minimal() +\n        theme(\n          plot.title = element_text(face = \"bold\", size = 16),\n          plot.subtitle = element_text(size = 12),\n          panel.grid.minor = element_blank(),\n          legend.position = \"bottom\",\n          legend.title = element_text(face = \"bold\"),\n          axis.title = element_text(face = \"bold\"),\n          plot.caption = element_text(size = 9, hjust = 0)\n        ) +\n        coord_cartesian(xlim = c(0, max(plot_data$day) * 1.3))  # More right space\n      \n      # Set y-limits for unemployment to start at 0\n      if (input$selected_index == \"unemployment\") {\n        p <- p + ylim(0, max(plot_data$value) * 1.1)\n      }\n    } else {\n      # Plot for a single market index\n      index_name <- unique(plot_data$index_name)[1]\n      \n      # Create end labels data\n      end_labels <- plot_data %>% \n        group_by(president) %>% \n        filter(day == max(day)) %>%\n        mutate(label = paste0(president, \" (\", round(percent_change, 1), \"%)\"))\n      \n      # Create ggplot with embedded URL in caption and more right space\n      p <- ggplot(plot_data, aes(x = day, y = percent_change, color = party, group = president)) +\n        geom_line(size = 1) +\n        geom_point(data = end_labels, size = 3) +\n        # Add end labels\n        geom_text_repel(\n          data = end_labels,\n          aes(label = label),\n          direction = \"y\",\n          hjust = 0,\n          vjust = 0,\n          nudge_x = 5,\n          force = 3,\n          segment.size = 0.2,\n          box.padding = 0.5,\n          show.legend = FALSE\n        ) +\n        geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n        scale_color_manual(values = party_colors) +\n        labs(\n          title = paste(index_name, \"Performance Since\", ref_type),\n          subtitle = paste0(\"Showing first \", input$time_period, \" days (0% = value on reference date)\"),\n          x = paste(\"Days Since\", ref_type),\n          y = \"Percent Change (%)\",\n          caption = paste0(\"Generated on \", Sys.Date(), \" from https://jhelvy.github.io/potus-econ-scorecard/\"),\n          color = \"Party\"\n        ) +\n        theme_minimal() +\n        theme(\n          plot.title = element_text(face = \"bold\", size = 16),\n          plot.subtitle = element_text(size = 12),\n          panel.grid.minor = element_blank(),\n          legend.position = \"bottom\",\n          legend.title = element_text(face = \"bold\"),\n          axis.title = element_text(face = \"bold\"),\n          plot.caption = element_text(size = 9, hjust = 0)\n        ) +\n        coord_cartesian(xlim = c(0, max(plot_data$day) * 1.3))  # More right space\n    }\n    \n    # Show the plot in a modal with save instructions\n    showModal(\n      modalDialog(\n        title = \"Plot Export\",\n        size = \"l\",\n        plotOutput(\"export_plot_preview\", height = \"500px\"),\n        hr(),\n        tags$div(\n          style = \"text-align: center;\",\n          tags$p(\"To save this image, right-click on the plot above and select 'Save image as...'\")\n        ),\n        footer = tagList(\n          modalButton(\"Close\")\n        )\n      )\n    )\n    \n    output$export_plot_preview <- renderPlot({\n      p\n    }, height = 500, width = 800, res = 100)  # Increased resolution for better quality\n  })\n  \n  # Export data handler - client-side download approach\n  observeEvent(input$export_data, {\n    req(processed_data())\n    export_data <- processed_data() %>%\n      mutate(\n        reference_type = if(input$reference_date == \"inauguration\") \"Inauguration Day\" else \"Day Before Election\",\n        data_generated = as.character(Sys.Date())\n      )\n    \n    # Create a unique ID for this download\n    download_id <- paste0(\"download_\", round(runif(1, 1, 100000)))\n    \n    # Convert data to CSV format\n    csv_content <- reactive({\n      # Create the header row\n      headers <- paste(colnames(export_data), collapse = \",\")\n      \n      # Create data rows (escaping any commas in string fields)\n      rows <- apply(export_data, 1, function(row) {\n        # Convert row values to character and handle special cases\n        row_vals <- sapply(row, function(val) {\n          if (is.character(val) && grepl(\",\", val)) {\n            # Wrap strings containing commas in quotes\n            return(paste0('\"', val, '\"'))\n          } else {\n            return(as.character(val))\n          }\n        })\n        paste(row_vals, collapse = \",\")\n      })\n      \n      # Combine header and rows\n      csv_data <- paste(c(headers, rows), collapse = \"\\n\")\n      return(csv_data)\n    })\n    \n    # Get index name for the filename\n    index_name <- switch(input$selected_index,\n                       \"sp500\" = \"SP500\",\n                       \"djia\" = \"DowJones\",\n                       \"nasdaq\" = \"NASDAQ\",\n                       \"unemployment\" = \"Unemployment\",\n                       \"inflation\" = \"Inflation\")\n    \n    filename <- paste0(index_name, \"_data_\", Sys.Date(), \".csv\")\n    \n    # Create modal with preview and client-side download link\n    showModal(\n      modalDialog(\n        title = \"Data Export\",\n        size = \"l\",\n        p(\"The complete dataset is ready for download.\"),\n        p(paste0(\"Number of rows in dataset: \", nrow(export_data))),\n        \n        # Display a small preview of the data\n        tags$div(\n          style = \"max-height: 300px; overflow-y: auto;\",\n          renderTable({\n            head(export_data, 10)  # Show just first 10 rows as preview\n          })\n        ),\n        \n        # Add JavaScript to enable client-side download\n        tags$script(HTML(sprintf(\n          \"\n          function downloadCSV() {\n            var csvContent = %s;\n            var blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n            var link = document.createElement('a');\n            link.href = URL.createObjectURL(blob);\n            link.setAttribute('download', '%s');\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          }\n          \",\n          paste0(\"document.getElementById('\", download_id, \"').getAttribute('data-csv')\"),\n          filename\n        ))),\n        \n        # Hidden span to store the CSV data\n        tags$span(\n          id = download_id,\n          style = \"display: none;\",\n          `data-csv` = csv_content()\n        ),\n        \n        footer = tagList(\n          modalButton(\"Close\"),\n          tags$button(\n            \"Download Complete Dataset\",\n            class = \"btn btn-primary\",\n            onclick = \"downloadCSV()\"\n          )\n        )\n      )\n    )\n  })\n}\n\n#-------------------------------------------\n# Run the application\n#-------------------------------------------\nshinyApp(ui, server)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":false,"filters":["shinylive"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","shinylive":{"packages":["shiny","ggplot2","dplyr","ggrepel","plotly"]},"theme":"morph","page-layout":"full","compress":true,"resources":["shinylive-sw.js"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}